import React from "react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";

export const generatePDF = async (data) => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();

  // Load and add logo (centered)
  const logoUrl =
    "https://imgs.search.brave.com/LjpNDqHqD3VYegup7NM1DgidWN3IQ9TNr_MAnjXNYZA/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9jZG4u/Z3JhYm9uLmluL2dv/Z3JhYm9uL2ltYWdl/cy9tZXJjaGFudC8x/NzMwOTY3MjkxMTE5/L3R1dGVkdWRlLWxv/Z28uanBn";
  const logo = await fetch(logoUrl)
    .then((res) => res.blob())
    .then(
      (blob) =>
        new Promise((resolve) => {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result);
          reader.readAsDataURL(blob);
        })
    );

  doc.addImage(logo, "JPEG", pageWidth / 2 - 20, 10, 40, 20);

  // Title
  doc.setFontSize(24);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(30, 30, 90);
  doc.text("TUTEDUDE INTERVIEW REPORT", pageWidth / 2, 40, {
    align: "center",
  });

  // Candidate Info Table
  let y = 60;
  doc.setFontSize(14);
  doc.setFont("helvetica", "bold");
  doc.setTextColor(0, 0, 0);
  doc.text("Candidate Information", 14, y);

  // Determine Integrity Score Color
  const integrityColor =
    data.integrityScore >= 70
      ? [0, 150, 0] // Green
      : data.integrityScore >= 30
      ? [255, 165, 0] // Yellow
      : [255, 0, 0]; // Red

  // Determine Total Violations Color
  const violationsColor = data.violations > 50 ? [255, 0, 0] : [0, 0, 0];

  // Calculate Lost Focus Time (ms → seconds)
  const lostFocusTime =
    (data.details?.events || [])
      .filter((e) => e.type === "NO_FACE" || e.type === "LOOK_AWAY")
      .reduce((sum, e) => sum + (e.durationMs || 0), 0) / 1000; // convert ms → sec

  const candidateInfo = [
    ["Candidate Name", data.name],
    ["Interview Date", data.interviewDate],
    ["Duration", data.duration],
    ["Integrity Score", data.integrityScore + "%"],
    ["Total Violations", data.violations],
    ["Lost Focus Time", `${lostFocusTime}s`],
  ];

  autoTable(doc, {
    startY: y + 5,
    body: candidateInfo,
    styles: { fontSize: 11, cellPadding: 4 },
    columnStyles: {
      0: { fontStyle: "bold", textColor: [40, 40, 80] }, // labels
      1: {
        textColor: (row, col) => {
          if (row.index === 3) return integrityColor; // Integrity Score
          if (row.index === 4) return violationsColor; // Violations
          if (row.index === 5) return [200, 150, 0]; // Lost Focus Time = Yellow
          return [0, 0, 0];
        },
      },
    },
    alternateRowStyles: { fillColor: [250, 250, 250] },
    theme: "grid",
  });

  // Event Summary Table
  const eventSummary = data.details.events.reduce((acc, e) => {
    acc[e.event] = (acc[e.event] || 0) + 1;
    return acc;
  }, {});
  const summaryRows = Object.entries(eventSummary).map(([event, count]) => [
    event.replace(/_/g, " "),
    count,
  ]);

  doc.setFont("helvetica", "bold");
  doc.text("Event Summary", 14, doc.lastAutoTable.finalY + 10);
  autoTable(doc, {
    startY: doc.lastAutoTable.finalY + 15,
    head: [["Event", "Count"]],
    body: summaryRows,
    styles: { fontSize: 10, halign: "center" },
    headStyles: { fillColor: [40, 40, 80], textColor: [255, 255, 255] },
    alternateRowStyles: { fillColor: [240, 240, 240] },
  });

  // Event Log Table
  const eventRows = data.details.events.map((e) => [
    e.time,
    e.event.replace(/_/g, " "),
    e.type,
  ]);

  doc.setFont("helvetica", "bold");
  doc.text("Event Log", 14, doc.lastAutoTable.finalY + 10);

  autoTable(doc, {
    startY: doc.lastAutoTable.finalY + 15,
    head: [["Time", "Event", "Type"]],
    body: eventRows,
    styles: { fontSize: 9 },
    headStyles: { fillColor: [40, 40, 80], textColor: [255, 255, 255] },
    alternateRowStyles: { fillColor: [250, 250, 250] },
  });

  // Footer with timestamp
  const now = new Date();
  const timestamp = now.toLocaleString();
  doc.setFontSize(9);
  doc.setTextColor(100);
  doc.text(
    `Generated by Tutedude Proctoring System — ${timestamp}`,
    pageWidth / 2,
    doc.internal.pageSize.getHeight() - 10,
    { align: "center" }
  );

  // Save PDF
  doc.save(`${data.name}_Proctoring_Report.pdf`);
};
